letter可以考虑sort
nm，iter n然后对比所有m，可以考虑hash. OR Stack for mem from nm -> n

2d -> dfs, bfs

bfs距离就是level。 bfs queue两种写法, push的时候每个node操作可以直接知道parent.
bfs算level数，https://www.lintcode.com/problem/zombie-in-matrix/description?_from=ladder&&fromId=14  round++ for len(queue)
感染2d bfs dfs
bfs如果是更新min，不需要查是否小于，因为一定是最小level.
bfs dx dy don't forget to check boundry <0. and while queue, not visited

倒着dfs的话，就算改了link（parent），下面的改了，上面的因为记住了所以可以返回继续，不会lose link

when (tuple) first value to compare, what if they are equal. need add a counter to the second element of the tuple


二分法重要:
[](0[])  if so:   (left=mid)  break with 2 nums
while left + 1 < right

dummy的用法可以有空list

7DE = (7 * 162) + (13 * 161) + (14 * 160)    2->[0,1]

linkedlist  two pointers. dummy->head. return dummy or head

nestedList -> tree. iterator.
2 stacks -> order reverse, reverse

135. Combination Sum. backtracking/dfs: add. res. pop. this cannot be added to mem.
this is an important algo for non-dup combination in res. 1, input unique. 2, sorting order

bfs适合寻找最小状态转换次数，最先找到的一定是最好的。dfs适合寻找所有方案.

method(lst) -> lst[1]=1 or lst.remove() both works.

O(2^n)<O(n!)
permutation n!  combination ?  2^n - 1 (1 means nothing)
permutation dfs不需要stack记录children是因为index就是0，1，2，3，4……直接nums[i]， 你可以直接知道next permutation without stack to keep track

%2 -> 0, 1 (<2)  2%2 = 0

while linkedlist Node.next 算剪头数   while node 算node数.
linkedlist node. two pointers. *move together*.

# 怎么判断是不是一棵树 (3个条件满足2个即可)
# 1 边 一定要等于 n-1 (union find, BFS)
#
# 2 从0 节点一定可以连通到其他所有节点。 (BFS)
#
# 3 所有节点不成环（union Find)
union find complexity log*n -> amortized O(1)   near-constant-time operations

528. Flatten Nested List Iterator  nodetree   从左往右的顺序一定是dfs
